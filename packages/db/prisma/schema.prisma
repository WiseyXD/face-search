// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(ADMIN)
  cityId        String?   
  accounts      Account[]
  sessions      Session[]
  city          City?     @relation(fields: [cityId], references: [id])
  createdAt     DateTime  @default(now()) @map("createdat")
  updatedAt     DateTime? @updatedAt @map("updatedat")
  isOnboarded   Boolean   @default(false) @map("isonboarded")
  
  @@map("users")
}

enum Role {
  USER
  ADMIN
  SECURITY_OFFICER
  SYSTEM_ADMIN
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model City {
  id        String   @id @default(cuid())
  name      String
  region    String?
  country   String
  users     User[]
  zones     Zone[]
  sensors   Sensor[]
  alerts    Alert[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities")
}

model Zone {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      Status   @default(ACTIVE)
  cityId      String
  city        City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  sensors     Sensor[]
  alerts      Alert[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("zones")
}

enum Status {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

model Sensor {
  id          String       @id @default(cuid())
  name        String
  type        SensorType
  status      Status       @default(ACTIVE)
  location    String
  description String?
  zoneId      String
  zone        Zone         @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  cityId      String
  city        City         @relation(fields: [cityId], references: [id])
  alerts      Alert[]
  sensorData  SensorData[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("sensors")
}

enum SensorType {
  VIDEO
  THERMAL
  VIBRATION
  MOTION
  AUDIO
  WEATHER
}

model SensorData {
  id        String   @id @default(cuid())
  sensorId  String
  sensor    Sensor   @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  dataValue Json
  alertId   String?
  alert     Alert?   @relation(fields: [alertId], references: [id])

  @@map("sensor_data")
}

model Alert {
  id          String       @id @default(cuid())
  type        AlertType
  severity    Severity
  timestamp   DateTime     @default(now())
  location    String
  description String
  status      AlertStatus  @default(UNRESOLVED)
  thumbnail   String?
  zoneId      String
  zone        Zone         @relation(fields: [zoneId], references: [id])
  cityId      String
  city        City         @relation(fields: [cityId], references: [id])
  sensors     Sensor[]
  sensorData  SensorData[]
  actions     Action[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("alerts")
}

enum AlertType {
  INTRUSION
  ANOMALY
  MOVEMENT
  FIRE
  FLOOD
  TRAFFIC
  OTHER
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum AlertStatus {
  UNRESOLVED
  INVESTIGATING
  RESOLVED
}

model Action {
  id          String    @id @default(cuid())
  alertId     String
  alert       Alert     @relation(fields: [alertId], references: [id], onDelete: Cascade)
  actionType  String
  description String
  performedBy String?
  timestamp   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("actions")
}
