// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  role             Role      @default(USER)
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime  @default(now()) @map("createdat")
  updatedAt        DateTime? @updatedAt @map("updatedat")
  isOnboarded      Boolean   @default(false) @map("isonboarded")
  faceEmbedding    Float[]   @map("face_embedding") @default([]) // Reference face embedding
  
  // New relations
  uploadedAlbums   Album[]
  searches         Search[]
  
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ADDED MODELS FOR FACE RECOGNITION GALLERY

// Photo albums/collections
model Album {
  id          String    @id @default(cuid())
  name        String
  description String?
  eventDate   DateTime? @map("event_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  uploadedBy  String    @map("uploaded_by")
  uploader    User      @relation(fields: [uploadedBy], references: [id])
  isPublic    Boolean   @default(false) @map("is_public")
  
  // Relations
  images      Image[]
  
  @@map("albums")
}

// Individual images
model Image {
  id               String           @id @default(cuid())
  filename         String
  originalPath     String           @map("original_path") // Storage path to original image
  thumbnailPath    String?          @map("thumbnail_path") // Path to thumbnail
  width            Int?
  height           Int?
  fileSize         Int?             @map("file_size") // Size in bytes
  mimetype         String?
  uploadedAt       DateTime         @default(now()) @map("uploaded_at")
  albumId          String           @map("album_id")
  album            Album            @relation(fields: [albumId], references: [id], onDelete: Cascade)
  processingStatus ProcessingStatus @default(PENDING) @map("processing_status")
  
  // Relations
  faces            Face[]
  metadata         ImageMetadata?
  
  @@map("images")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Optional image metadata (EXIF, etc.)
model ImageMetadata {
  id                String    @id @default(cuid())
  imageId           String    @unique @map("image_id")
  image             Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  dateTaken         DateTime? @map("date_taken")
  location          Json?     // Optional GPS coordinates
  camera            String?
  exposure          String?
  aperture          String?
  iso               Int?
  focalLength       String?   @map("focal_length")
  additionalMetadata Json?    @map("additional_metadata") // Any other metadata as JSON
  
  @@map("image_metadata")
}

// Detected faces in images
model Face {
  id            String    @id @default(cuid())
  imageId       String    @map("image_id")
  image         Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  faceEmbedding Float[]   @map("face_embedding") @default([]) // Face embedding vector
  boundingBox   Json      @map("bounding_box") // JSON with x, y, width, height
  landmarks     Json?     // Optional facial landmarks
  confidence    Float     // Detection confidence score
  
  // Relations
  matches       Match[]
  
  @@map("faces")
}

// User search queries
model Search {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchImage   String?   @map("search_image") // Path to uploaded search image
  searchFace    Float[]   @map("search_face") @default([]) // Face embedding used for search
  threshold     Float     @default(0.6) // Similarity threshold used
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  matches       Match[]
  
  @@map("searches")
}

// Matches between search queries and faces
model Match {
  id            String    @id @default(cuid())
  searchId      String    @map("search_id")
  search        Search    @relation(fields: [searchId], references: [id], onDelete: Cascade)
  faceId        String    @map("face_id")
  face          Face      @relation(fields: [faceId], references: [id], onDelete: Cascade)
  similarity    Float     // Similarity score (0.0 to 1.0)
  createdAt     DateTime  @default(now()) @map("created_at")
  
  @@map("matches")
}

// Processing jobs queue
model ProcessingJob {
  id            String           @id @default(cuid())
  jobType       String           @map("job_type") // "face-detection", "embedding-extraction", etc.
  status        JobStatus        @default(QUEUED)
  payload       Json             // Job-specific data
  progress      Float            @default(0) // 0-100%
  result        Json?            // Job results
  error         String?          // Error message if failed
  createdAt     DateTime         @default(now()) @map("created_at")
  startedAt     DateTime?        @map("started_at")
  completedAt   DateTime?        @map("completed_at")
  
  @@map("processing_jobs")
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

// System settings
model SystemSetting {
  id            String    @id @default(cuid())
  key           String    @unique
  value         String    @db.Text
  description   String?
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     String?   @map("updated_by") // User ID who last updated this setting
  
  @@map("system_settings")
}
